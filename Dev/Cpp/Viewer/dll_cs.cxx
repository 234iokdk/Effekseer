/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_EffekseerNative(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_EffekseerNative(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_EffekseerNative(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_EffekseerNative(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#include "GUI/efk.ImageResource.h"
#include "dll.h"
#include "GUI/efk.GUIManager.h"
#include "GUI/efk.FileDialog.h"


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT char16_t * SWIGSTDCALL CSharp_Effekseerfswig_ImageResource_GetPath___(void * jarg1) {
  char16_t * jresult ;
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (efk::ImageResource *)jarg1; 
  result = (char16_t *)((efk::ImageResource const *)arg1)->GetPath();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_ImageResource___() {
  void * jresult ;
  efk::ImageResource *result = 0 ;
  
  result = (efk::ImageResource *)new efk::ImageResource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_ImageResource___(void * jarg1) {
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  
  arg1 = (efk::ImageResource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideWidth_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->GuideWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideWidth_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (int32_t) ((arg1)->GuideWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideHeight_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->GuideHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideHeight_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (int32_t) ((arg1)->GuideHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RateOfMagnification_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RateOfMagnification = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RateOfMagnification_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->RateOfMagnification);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsPerspective_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsPerspective = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsPerspective_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->IsPerspective);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsOrthographic_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsOrthographic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsOrthographic_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->IsOrthographic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusX_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FocusX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusX_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->FocusX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusY_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FocusY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusY_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->FocusY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusZ_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FocusZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusZ_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->FocusZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleX_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AngleX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleX_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->AngleX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleY_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AngleY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleY_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->AngleY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distance_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distance_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->Distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RendersGuide_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RendersGuide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RendersGuide_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->RendersGuide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsCullingShown_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsCullingShown = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsCullingShown_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->IsCullingShown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingRadius_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingRadius_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingX_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingX_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingY_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingY_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingZ_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingZ_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distortion_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  DistortionType arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (DistortionType)jarg2; 
  if (arg1) (arg1)->Distortion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distortion_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  DistortionType result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (DistortionType) ((arg1)->Distortion);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_ViewerParamater___() {
  void * jresult ;
  ViewerParamater *result = 0 ;
  
  result = (ViewerParamater *)new ViewerParamater();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_ViewerParamater___(void * jarg1) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountX_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CountX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountX_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->CountX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountY_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CountY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountY_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->CountY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountZ_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CountZ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountZ_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->CountZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TimeSpan_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TimeSpan = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TimeSpan_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->TimeSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorR_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorR = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorR_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorG_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorG = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorG_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorB_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorB = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorB_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorA_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorA = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorA_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_Distance_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_Distance_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->Distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RemovedTime_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RemovedTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RemovedTime_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->RemovedTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionVelocityX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionVelocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionVelocityY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionVelocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionVelocityZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionVelocityZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationVelocityX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationVelocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationVelocityY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationVelocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationVelocityZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationVelocityZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleVelocityX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleVelocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleVelocityY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleVelocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleVelocityZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleVelocityZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPositionX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->TargetPositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPositionY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->TargetPositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPositionZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->TargetPositionZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_ViewerEffectBehavior___() {
  void * jresult ;
  ViewerEffectBehavior *result = 0 ;
  
  result = (ViewerEffectBehavior *)new ViewerEffectBehavior();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_ViewerEffectBehavior___(void * jarg1) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_Native___() {
  void * jresult ;
  Native *result = 0 ;
  
  result = (Native *)new Native();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_Native___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_CreateWindow_Effekseer__SWIG_0___(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  {
    arg2 = jarg2; 
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->CreateWindow_Effekseer(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_CreateWindow_Effekseer__SWIG_1___(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  {
    arg2 = jarg2; 
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->CreateWindow_Effekseer(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_UpdateWindow___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->UpdateWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_Present___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  (arg1)->Present();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_ResizeWindow___(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->ResizeWindow(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_DestroyWindow___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->DestroyWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_LoadEffect___(void * jarg1, void * jarg2, int jarg3, char16_t * jarg4) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char16_t *arg4 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  {
    arg2 = jarg2; 
  }
  arg3 = (int)jarg3; 
  arg4 = (char16_t *)jarg4; 
  result = (bool)(arg1)->LoadEffect(arg2,arg3,(char16_t const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_RemoveEffect___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->RemoveEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_PlayEffect___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->PlayEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StopEffect___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->StopEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StepEffect__SWIG_0___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->StepEffect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StepEffect__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->StepEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Rotate___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Rotate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Slide___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Slide(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Zoom___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->Zoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_SetRandomSeed___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetRandomSeed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Record__SWIG_0___(void * jarg1, char16_t * jarg2, char16_t * jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *arg3 = (char16_t *) 0 ;
  int32_t arg4 ;
  int32_t arg5 ;
  int32_t arg6 ;
  TransparenceType arg7 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char16_t *)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (int32_t)jarg6; 
  arg7 = (TransparenceType)jarg7; 
  result = (bool)(arg1)->Record((char16_t const *)arg2,(char16_t const *)arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Record__SWIG_1___(void * jarg1, char16_t * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  int32_t arg6 ;
  TransparenceType arg7 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (int32_t)jarg6; 
  arg7 = (TransparenceType)jarg7; 
  result = (bool)(arg1)->Record((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_RecordAsGifAnimation___(void * jarg1, char16_t * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  TransparenceType arg6 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (TransparenceType)jarg6; 
  result = (bool)(arg1)->RecordAsGifAnimation((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_RecordAsAVI___(void * jarg1, char16_t * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  TransparenceType arg6 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (TransparenceType)jarg6; 
  result = (bool)(arg1)->RecordAsAVI((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_GetViewerParamater___(void * jarg1) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  ViewerParamater result;
  
  arg1 = (Native *)jarg1; 
  result = (arg1)->GetViewerParamater();
  jresult = new ViewerParamater((const ViewerParamater &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetViewerParamater___(void * jarg1, void * jarg2) {
  Native *arg1 = (Native *) 0 ;
  ViewerParamater *arg2 = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (ViewerParamater *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ViewerParamater & type is null", 0);
    return ;
  } 
  (arg1)->SetViewerParamater(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_GetEffectBehavior___(void * jarg1) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  ViewerEffectBehavior result;
  
  arg1 = (Native *)jarg1; 
  result = (arg1)->GetEffectBehavior();
  jresult = new ViewerEffectBehavior((const ViewerEffectBehavior &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetViewerEffectBehavior___(void * jarg1, void * jarg2) {
  Native *arg1 = (Native *) 0 ;
  ViewerEffectBehavior *arg2 = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (ViewerEffectBehavior *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ViewerEffectBehavior & type is null", 0);
    return ;
  } 
  (arg1)->SetViewerEffectBehavior(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_SetSoundMute___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->SetSoundMute(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_SetSoundVolume___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->SetSoundVolume(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_InvalidateTextureCache___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->InvalidateTextureCache();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetIsGridShown___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetIsGridShown(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetGridLength___(void * jarg1, float jarg2) {
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGridLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetBackgroundColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  (arg1)->SetBackgroundColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetBackgroundImage___(void * jarg1, char16_t * jarg2) {
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetBackgroundImage((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetGridColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->SetGridColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetMouseInverseFlag___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetMouseInverseFlag(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetStep___(void * jarg1, int jarg2) {
  Native *arg1 = (Native *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->SetStep(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StartNetwork___(void * jarg1, char * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (bool)(arg1)->StartNetwork((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_StopNetwork___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  (arg1)->StopNetwork();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_IsConnectingNetwork___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->IsConnectingNetwork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SendDataByNetwork___(void * jarg1, char16_t * jarg2, void * jarg3, int jarg4, char16_t * jarg5) {
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  char16_t *arg5 = (char16_t *) 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  {
    arg3 = jarg3; 
  }
  arg4 = (int)jarg4; 
  arg5 = (char16_t *)jarg5; 
  (arg1)->SendDataByNetwork((char16_t const *)arg2,arg3,arg4,(char16_t const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetLightDirection___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetLightDirection(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetLightColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->SetLightColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetLightAmbientColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->SetLightAmbientColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetIsRightHand___(void * jarg1, unsigned int jarg2) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsRightHand(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetCullingParameter___(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->SetCullingParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_LoadImageResource___(void * jarg1, char16_t * jarg2) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  efk::ImageResource *result = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (efk::ImageResource *)(arg1)->LoadImageResource((char16_t const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_GUIManager___() {
  void * jresult ;
  efk::GUIManager *result = 0 ;
  
  result = (efk::GUIManager *)new efk::GUIManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_GUIManager___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Initialize___(void * jarg1, char16_t * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Initialize((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetTitle___(void * jarg1, char16_t * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetTitle((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Terminate___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Terminate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DoEvents___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->DoEvents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Present___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Present();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ResetGUI___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->ResetGUI();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_RenderGUI___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->RenderGUI();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetNativeHandle___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  void *result = 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (void *)(arg1)->GetNativeHandle();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Begin___(void * jarg1, char16_t * jarg2, bool* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->Begin((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_End___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextWindowSize___(void * jarg1, float jarg2, float jarg3, int jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  float arg3 ;
  efk::Cond arg4 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (efk::Cond)jarg4; 
  (arg1)->SetNextWindowSize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PushItemWidth___(void * jarg1, float jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->PushItemWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PopItemWidth___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->PopItemWidth();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Separator___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Separator();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SameLine___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->SameLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Text___(void * jarg1, char16_t * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->Text((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TextWrapped___(void * jarg1, char16_t * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->TextWrapped((char16_t const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Button___(void * jarg1, char16_t * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->Button((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Image___(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImageResource *arg2 = (efk::ImageResource *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImageResource *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Image(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Checkbox___(void * jarg1, char16_t * jarg2, bool* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->Checkbox((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputInt__SWIG_0___(void * jarg1, char16_t * jarg2, int* jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->InputInt((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputInt__SWIG_1___(void * jarg1, char16_t * jarg2, int* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->InputInt((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputInt__SWIG_2___(void * jarg1, char16_t * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->InputInt((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SliderInt___(void * jarg1, char16_t * jarg2, int* jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SliderInt((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_0___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_1___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_2___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_3___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_4___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_5___(void * jarg1, char16_t * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_0___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_1___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_2___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_3___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_4___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_5___(void * jarg1, char16_t * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_0___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_1___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_2___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_3___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_4___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_5___(void * jarg1, char16_t * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_0___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_1___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_2___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_3___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_4___(void * jarg1, char16_t * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_5___(void * jarg1, char16_t * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_0___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7, char * jarg8, char * jarg9, float jarg10) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  float arg10 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,arg10);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_1___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7, char * jarg8, char * jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_2___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7, char * jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_3___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_4___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_5___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_6___(void * jarg1, char16_t * jarg2, float* jarg3, float* jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_0___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_1___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_2___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_3___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_4___(void * jarg1, char16_t * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_0___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_1___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_2___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_3___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_4___(void * jarg1, char16_t * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_0___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_1___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_2___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_3___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_4___(void * jarg1, char16_t * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_0___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_1___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_2___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_3___(void * jarg1, char16_t * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_4___(void * jarg1, char16_t * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_0___(void * jarg1, char16_t * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6, int jarg7, char * jarg8, char * jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_1___(void * jarg1, char16_t * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6, int jarg7, char * jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_2___(void * jarg1, char16_t * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_3___(void * jarg1, char16_t * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_4___(void * jarg1, char16_t * jarg2, int* jarg3, int* jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_5___(void * jarg1, char16_t * jarg2, int* jarg3, int* jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ColorEdit4__SWIG_0___(void * jarg1, char16_t * jarg2, float* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  efk::ColorEditFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (efk::ColorEditFlags)jarg4; 
  result = (bool)(arg1)->ColorEdit4((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ColorEdit4__SWIG_1___(void * jarg1, char16_t * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->ColorEdit4((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNode___(void * jarg1, char16_t * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->TreeNode((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreePop___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->TreePop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMainMenuBar___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginMainMenuBar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndMainMenuBar___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndMainMenuBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMenuBar___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginMenuBar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndMenuBar___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndMenuBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMenu__SWIG_0___(void * jarg1, char16_t * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->BeginMenu((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMenu__SWIG_1___(void * jarg1, char16_t * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->BeginMenu((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndMenu___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndMenu();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_0___(void * jarg1, char16_t * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_1___(void * jarg1, char16_t * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_2___(void * jarg1, char16_t * jarg2, char * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_3___(void * jarg1, char16_t * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_4___(void * jarg1, char16_t * jarg2, char * jarg3, bool* jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4;
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_5___(void * jarg1, char16_t * jarg2, char * jarg3, bool* jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4;
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_OpenPopup___(void * jarg1, char * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OpenPopup((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupModal__SWIG_0___(void * jarg1, char16_t * jarg2, bool* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  efk::WindowFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (efk::WindowFlags)jarg4; 
  result = (bool)(arg1)->BeginPopupModal((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupModal__SWIG_1___(void * jarg1, char16_t * jarg2, bool* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->BeginPopupModal((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupModal__SWIG_2___(void * jarg1, char16_t * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->BeginPopupModal((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupContextItem__SWIG_0___(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->BeginPopupContextItem((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupContextItem__SWIG_1___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->BeginPopupContextItem((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupContextItem__SWIG_2___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginPopupContextItem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndPopup___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndPopup();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsPopupOpen___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsPopupOpen((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_CloseCurrentPopup___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->CloseCurrentPopup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_AddFontFromFileTTF___(void * jarg1, char * jarg2, float jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AddFontFromFileTTF((char const *)arg2,arg3);
}


SWIGEXPORT char16_t * SWIGSTDCALL CSharp_Effekseerfswig_FileDialog_OpenDialog___(char16_t * jarg1, char16_t * jarg2) {
  char16_t * jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (char16_t *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (char16_t *)efk::FileDialog::OpenDialog((char16_t const *)arg1,(char16_t const *)arg2);
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT char16_t * SWIGSTDCALL CSharp_Effekseerfswig_FileDialog_SaveDialog___(char16_t * jarg1, char16_t * jarg2) {
  char16_t * jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (char16_t *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (char16_t *)efk::FileDialog::SaveDialog((char16_t const *)arg1,(char16_t const *)arg2);
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_FileDialog___() {
  void * jresult ;
  efk::FileDialog *result = 0 ;
  
  result = (efk::FileDialog *)new efk::FileDialog();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_FileDialog___(void * jarg1) {
  efk::FileDialog *arg1 = (efk::FileDialog *) 0 ;
  
  arg1 = (efk::FileDialog *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

